---
// Props para determinar el estado actual
interface Props {
  mode?: 'web' | 'cv';
  theme?: 'light' | 'dark';
}

const { mode = 'web', theme = 'light' } = Astro.props;

// Solo mostramos la navegaci√≥n completa en modo web
const showFullNav = mode === 'web';

// Definimos las secciones para la navegaci√≥n
const navItems = [
  { name: 'Inicio', href: '#inicio', icon: 'home' },
  { name: 'Acerca de m√≠', href: '#acerca-de-mi', icon: 'user' },
  { name: 'Certificados', href: '#certificados', icon: 'certificate' },
  { name: 'Proyectos', href: '#proyectos', icon: 'code' },
  { name: 'Skills', href: '#skills', icon: 'tools' }
];
---

<nav id="main-nav" class={`
  fixed z-50 w-full transition-all duration-300
  ${mode === 'web' && theme === 'light' ? 'bg-web-light-background text-web-light-text' : ''}
  ${mode === 'web' && theme === 'dark' ? 'bg-web-dark-background text-web-dark-text' : ''}
  ${mode === 'cv' && theme === 'light' ? 'bg-cv-light-background text-cv-light-text' : ''}
  ${mode === 'cv' && theme === 'dark' ? 'bg-cv-dark-background text-cv-dark-text' : ''}
`}>
  <div class="max-w-container mx-auto px-4 sm:px-6">
    <div class="flex justify-between items-center py-4">
      <!-- Logo / Nombre -->
      <div class="flex items-center">
        <a href="#" class="text-xl font-bold">Tu Nombre</a>
      </div>

      <!-- Navegaci√≥n principal (solo visible en modo web) -->
      {showFullNav && (
        <div class="hidden md:flex space-x-8">
          {navItems.map(item => (
            <a 
              href={item.href} 
              class="hover:text-primary transition-colors"
            >
              {item.name}
            </a>
          ))}
        </div>
      )}

      <!-- Botones de modo y tema -->
      <div class="flex items-center space-x-4">
        <!-- Bot√≥n de cambio de tema (claro/oscuro) -->
        <button 
          id="theme-toggle" 
          class="p-2 rounded-full hover:bg-opacity-10 hover:bg-gray-500"
          aria-label="Cambiar tema"
        >
          <!-- Icono sol para modo oscuro -->
          <span id="light-icon" class={theme === 'dark' ? 'block' : 'hidden'}>üåû</span>
          <!-- Icono luna para modo claro -->
          <span id="dark-icon" class={theme === 'light' ? 'block' : 'hidden'}>üåô</span>
        </button>
        
        <!-- Bot√≥n de cambio de modo (web/cv) -->
        <button 
          id="mode-toggle" 
          class="p-2 rounded-full hover:bg-opacity-10 hover:bg-gray-500"
          aria-label="Cambiar modo"
        >
          <!-- Icono CV para modo web -->
          <span id="cv-icon" class={mode === 'web' ? 'block' : 'hidden'}>üìÑ</span>
          <!-- Icono Web para modo CV -->
          <span id="web-icon" class={mode === 'cv' ? 'block' : 'hidden'}>üåê</span>
        </button>
        
        <!-- Men√∫ hamburguesa para m√≥viles (solo en modo web) -->
        {showFullNav && (
          <button 
            id="mobile-menu-button" 
            class="md:hidden p-2"
            aria-label="Men√∫"
          >
            ‚â°
          </button>
        )}
      </div>
    </div>
  </div>
  
  <!-- Men√∫ m√≥vil (oculto por defecto) -->
  {showFullNav && (
    <div id="mobile-menu" class="md:hidden hidden px-4 pb-4">
      <div class="flex flex-col space-y-3">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="py-2 hover:text-primary transition-colors"
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  )}
</nav>

<!-- Navegaci√≥n lateral que aparecer√° al hacer scroll (solo en modo web) -->
{showFullNav && (
  <nav id="side-nav" class="fixed right-4 top-1/2 transform -translate-y-1/2 hidden z-40">
    <div class="flex flex-col space-y-4">
      {navItems.map(item => (
        <a 
          href={item.href} 
          class="p-2 rounded-full bg-primary text-white hover:bg-opacity-90 transition-all"
          title={item.name}
        >
          <!-- Aqu√≠ ir√≠an iconos, pero por simplicidad usemos letras -->
          {item.icon.charAt(0).toUpperCase()}
        </a>
      ))}
    </div>
  </nav>
)}

<script>
  // L√≥gica para el men√∫ m√≥vil
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });
  }
  
  // L√≥gica para cambiar tema (claro/oscuro)
  const themeToggle = document.getElementById('theme-toggle');
  const lightIcon = document.getElementById('light-icon');
  const darkIcon = document.getElementById('dark-icon');
  
  if (themeToggle && lightIcon && darkIcon) {
    themeToggle.addEventListener('click', () => {
      document.body.classList.toggle('dark');
      document.body.classList.toggle('light');
      
      lightIcon.classList.toggle('hidden');
      darkIcon.classList.toggle('hidden');
      
      const newTheme = document.body.classList.contains('dark') ? 'dark' : 'light';
      localStorage.setItem('theme', newTheme);
    });
  }
  
  // L√≥gica para cambiar modo (web/cv)
  const modeToggle = document.getElementById('mode-toggle');
  const cvIcon = document.getElementById('cv-icon');
  const webIcon = document.getElementById('web-icon');
  
  if (modeToggle && cvIcon && webIcon) {
    modeToggle.addEventListener('click', () => {
      document.body.classList.toggle('mode-web');
      document.body.classList.toggle('mode-cv');
      
      cvIcon.classList.toggle('hidden');
      webIcon.classList.toggle('hidden');
      
      const newMode = document.body.classList.contains('mode-web') ? 'web' : 'cv';
      localStorage.setItem('mode', newMode);
      
      // Recargar la p√°gina para aplicar los cambios correctamente
      location.reload();
    });
  }
  
  // L√≥gica para la navegaci√≥n lateral al hacer scroll
  const mainNav = document.getElementById('main-nav');
  const sideNav = document.getElementById('side-nav');
  
  if (mainNav && sideNav) {
    let lastScrollY = window.scrollY;
    
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      // Mostrar/ocultar navegaci√≥n principal
      if (currentScrollY > 100) {
        if (currentScrollY > lastScrollY) {
          // Scrolling down
          mainNav.classList.add('transform', '-translate-y-full');
          sideNav.classList.remove('hidden');
        } else {
          // Scrolling up
          mainNav.classList.remove('transform', '-translate-y-full');
        }
      } else {
        // En la parte superior
        mainNav.classList.remove('transform', '-translate-y-full');
        sideNav.classList.add('hidden');
      }
      
      lastScrollY = currentScrollY;
    });
  }
</script>